plugins {
  id 'conventions'
  id 'org.springframework.boot' version '3.3.0'
  id "io.gitlab.plunts.plantuml" version "2.1.7"
  id "org.gradlex.extra-java-module-info" version "1.8"// apply(false)
}

group = 'ru.tbank.javaconf'
version = '0.0.1-SNAPSHOT'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenLocal()
  mavenCentral()
}

classDiagrams {
  def modules = ["operations", "report", "tax", "shared"]
  diagram {
    name "Class Diagram"

    include packages().withName("ru.tbank.javaconf.modulism")
    exclude methods().thatAreAccessors()
    exclude fields()

    modules.each {
      exclude packages().withName("ru.tbank.javaconf.modulism.${it}.dto").recursive()
      exclude packages().withName("ru.tbank.javaconf.modulism.${it}.entity").recursive()
    }

    renderTo file('diagrams/classes.svg')
  }
}

dependencies {
  implementation project(":operations")
  implementation project(":tax")
  implementation project(":report")
  testImplementation project(":shared")

  //deps
  implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'jakarta.validation:jakarta.validation-api'
  implementation 'org.springframework.kafka:spring-kafka'
  // required for custom module placement
  implementation 'org.springframework.modulith:spring-modulith-core'

  implementation 'org.springframework.modulith:spring-modulith-starter-core'
  implementation 'org.springframework.modulith:spring-modulith-starter-jdbc'
  implementation 'io.micrometer:micrometer-tracing'

  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

  implementation 'com.h2database:h2'

  // autoconfigured in runtime
  runtimeOnly 'org.liquibase:liquibase-core'
  runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
  runtimeOnly 'io.micrometer:micrometer-tracing-bridge-brave'
  runtimeOnly 'io.zipkin.reporter2:zipkin-reporter-brave'
  runtimeOnly 'io.zipkin.brave:brave'
  runtimeOnly 'io.micrometer:micrometer-observation'
  runtimeOnly 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
  // provides spring-modulith-runtime which adds runtime check and tracing
  runtimeOnly 'org.springframework.modulith:spring-modulith-starter-insight'

  // test
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.kafka:spring-kafka-test'
}


extraJavaModuleInfo {
  automaticModule("org.apache.kafka:kafka-clients", "kafka.clients")
  automaticModule("org.apache.kafka:kafka-clients", "kafka.clients")
  automaticModule("com.github.jsqlparser:jsqlparser", "jsqlparser")
  automaticModule("org.springframework.retry:spring-retry", "spring.retry")
  automaticModule("org.webjars:swagger-ui", "swagger.ui")
  automaticModule("org.xerial.snappy:snappy-java", "snappy")
  automaticModule("org.hdrhistogram:HdrHistogram", "hrdhist")
  automaticModule("org.latencyutils:LatencyUtils", "latensyutils")
}

bootRun {
  modularity.inferModulePath = true
}
